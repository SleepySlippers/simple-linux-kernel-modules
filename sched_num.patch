diff --git a/fs/proc/base.c b/fs/proc/base.c
index 9df3f4839..4bf34db4e 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -488,6 +488,20 @@ static int proc_pid_schedstat(struct seq_file *m, struct pid_namespace *ns,
 }
 #endif
 
+/*
+ * Provides /proc/PID/sched_num
+ */
+static int proc_pid_sched_num(struct seq_file *m, struct pid_namespace *ns,
+			      struct pid *pid, struct task_struct *task)
+{
+	if (unlikely(!sched_info_on()))
+		seq_puts(m, "0\n");
+	else
+		seq_printf(m, "%d\n", atomic_read(&task->sched_num));
+
+	return 0;
+}
+
 #ifdef CONFIG_LATENCYTOP
 static int lstats_show_proc(struct seq_file *m, void *v)
 {
@@ -3296,6 +3310,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_SCHED_INFO
 	ONE("schedstat",  S_IRUGO, proc_pid_schedstat),
 #endif
+	ONE("sched_num",   S_IRUGO, proc_pid_sched_num),
 #ifdef CONFIG_LATENCYTOP
 	REG("latency",  S_IRUGO, proc_lstats_operations),
 #endif
@@ -3644,6 +3659,7 @@ static const struct pid_entry tid_base_stuff[] = {
 #ifdef CONFIG_SCHED_INFO
 	ONE("schedstat", S_IRUGO, proc_pid_schedstat),
 #endif
+	ONE("sched_num",  S_IRUGO, proc_pid_sched_num),
 #ifdef CONFIG_LATENCYTOP
 	REG("latency",  S_IRUGO, proc_lstats_operations),
 #endif
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 609bde814..c5e01e5fa 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1396,6 +1396,8 @@ struct task_struct {
 	atomic_t			tracing_graph_pause;
 #endif
 
+	atomic_t			sched_num;
+
 #ifdef CONFIG_TRACING
 	/* Bitmask and counter of trace recursion: */
 	unsigned long			trace_recursion;
diff --git a/init/init_task.c b/init/init_task.c
index ff6c4b9bf..991c0b397 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -198,6 +198,7 @@ struct task_struct init_task
 	.ret_stack		= NULL,
 	.tracing_graph_pause	= ATOMIC_INIT(0),
 #endif
+	.sched_num				= ATOMIC_INIT(0),
 #if defined(CONFIG_TRACING) && defined(CONFIG_PREEMPTION)
 	.trace_recursion = 0,
 #endif
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index c52c2eba7..2c2de93f4 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -6672,6 +6672,7 @@ static void __sched notrace __schedule(unsigned int sched_mode)
 	}
 
 	next = pick_next_task(rq, prev, &rf);
+	atomic_inc(&next->sched_num);
 	clear_tsk_need_resched(prev);
 	clear_preempt_need_resched();
 #ifdef CONFIG_SCHED_DEBUG
